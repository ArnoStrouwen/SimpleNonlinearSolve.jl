module SimpleNonlinearSolveNNlibExt

using ArrayInterface, DiffEqBase, LinearAlgebra, NNlib, SimpleNonlinearSolve, SciMLBase
import SimpleNonlinearSolve: _construct_batched_problem_structure,
    _get_storage, _init_ùìô, _result_from_storage, _get_tolerance, @maybeinplace

function __init__()
    SimpleNonlinearSolve.NNlibExtLoaded[] = true
    return
end

# Broyden's method
@views function SciMLBase.__solve(prob::NonlinearProblem,
    alg::BatchedBroyden;
    abstol = nothing,
    reltol = nothing,
    maxiters = 1000,
    kwargs...)
    iip = isinplace(prob)

    u, f, reconstruct = _construct_batched_problem_structure(prob)
    L, N = size(u)

    tc = alg.termination_condition
    mode = DiffEqBase.get_termination_mode(tc)

    storage = _get_storage(mode, u)

    x‚Çô, x‚Çô‚Çã‚ÇÅ, Œ¥x‚Çô, Œ¥f = ntuple(_ -> copy(u), 4)
    T = eltype(u)

    atol = _get_tolerance(abstol, tc.abstol, T)
    rtol = _get_tolerance(reltol, tc.reltol, T)
    termination_condition = tc(storage)

    ùìô‚Åª¬π = _init_ùìô(x‚Çô)  # L √ó L √ó N
    ùìô‚Åª¬πf, x·µÄùìô‚Åª¬πŒ¥f, x·µÄùìô‚Åª¬π = similar(ùìô‚Åª¬π, L, N), similar(ùìô‚Åª¬π, 1, N), similar(ùìô‚Åª¬π, 1, L, N)

    @maybeinplace iip f‚Çô‚Çã‚ÇÅ=f(x‚Çô) u
    iip && (f‚Çô = copy(f‚Çô‚Çã‚ÇÅ))
    for n in 1:maxiters
        batched_mul!(reshape(ùìô‚Åª¬πf, L, 1, N), ùìô‚Åª¬π, reshape(f‚Çô‚Çã‚ÇÅ, L, 1, N))
        x‚Çô .= x‚Çô‚Çã‚ÇÅ .- ùìô‚Åª¬πf

        @maybeinplace iip f‚Çô=f(x‚Çô)
        Œ¥x‚Çô .= x‚Çô .- x‚Çô‚Çã‚ÇÅ
        Œ¥f .= f‚Çô .- f‚Çô‚Çã‚ÇÅ

        batched_mul!(reshape(ùìô‚Åª¬πf, L, 1, N), ùìô‚Åª¬π, reshape(Œ¥f, L, 1, N))
        Œ¥x‚Çô·µÄ = reshape(Œ¥x‚Çô, 1, L, N)

        batched_mul!(reshape(x·µÄùìô‚Åª¬πŒ¥f, 1, 1, N), Œ¥x‚Çô·µÄ, reshape(ùìô‚Åª¬πf, L, 1, N))
        batched_mul!(x·µÄùìô‚Åª¬π, Œ¥x‚Çô·µÄ, ùìô‚Åª¬π)
        Œ¥x‚Çô .= (Œ¥x‚Çô .- ùìô‚Åª¬πf) ./ (x·µÄùìô‚Åª¬πŒ¥f .+ T(1e-5))
        batched_mul!(ùìô‚Åª¬π, reshape(Œ¥x‚Çô, L, 1, N), x·µÄùìô‚Åª¬π, one(T), one(T))

        if termination_condition(f‚Çô, x‚Çô, x‚Çô‚Çã‚ÇÅ, atol, rtol)
            retcode, x‚Çô, f‚Çô = _result_from_storage(storage, x‚Çô, f‚Çô, f, mode, iip)
            return DiffEqBase.build_solution(prob,
                alg,
                reconstruct(x‚Çô),
                reconstruct(f‚Çô);
                retcode)
        end

        x‚Çô‚Çã‚ÇÅ .= x‚Çô
        f‚Çô‚Çã‚ÇÅ .= f‚Çô
    end

    if mode ‚àà DiffEqBase.SAFE_BEST_TERMINATION_MODES
        x‚Çô = storage.u
        @maybeinplace iip f‚Çô=f(x‚Çô)
    end

    return DiffEqBase.build_solution(prob,
        alg,
        reconstruct(x‚Çô),
        reconstruct(f‚Çô);
        retcode = ReturnCode.MaxIters)
end

# Limited Memory Broyden's method
@views function SciMLBase.__solve(prob::NonlinearProblem,
    alg::BatchedLBroyden;
    abstol = nothing,
    reltol = nothing,
    maxiters = 1000,
    kwargs...)
    iip = isinplace(prob)

    u, f, reconstruct = _construct_batched_problem_structure(prob)
    L, N = size(u)
    T = eltype(u)

    tc = alg.termination_condition
    mode = DiffEqBase.get_termination_mode(tc)

    storage = _get_storage(mode, u)

    Œ∑ = min(maxiters, alg.threshold)
    U = fill!(similar(u, (Œ∑, L, N)), zero(T))
    V·µÄ = fill!(similar(u, (L, Œ∑, N)), zero(T))

    x‚Çô, x‚Çô‚Çã‚ÇÅ, Œ¥f‚Çô = ntuple(_ -> copy(u), 3)

    atol = _get_tolerance(abstol, tc.abstol, T)
    rtol = _get_tolerance(reltol, tc.reltol, T)
    termination_condition = tc(storage)

    @maybeinplace iip f‚Çô‚Çã‚ÇÅ=f(x‚Çô) u
    iip && (f‚Çô = copy(f‚Çô‚Çã‚ÇÅ))
    Œ¥x‚Çô = -copy(f‚Çô‚Çã‚ÇÅ)
    Œ∑Nx = similar(x‚Çô, Œ∑, N)

    for i in 1:maxiters
        @. x‚Çô = x‚Çô‚Çã‚ÇÅ - Œ¥x‚Çô
        @maybeinplace iip f‚Çô=f(x‚Çô)
        @. Œ¥x‚Çô = x‚Çô - x‚Çô‚Çã‚ÇÅ
        @. Œ¥f‚Çô = f‚Çô - f‚Çô‚Çã‚ÇÅ

        if termination_condition(f‚Çô, x‚Çô, x‚Çô‚Çã‚ÇÅ, atol, rtol)
            retcode, x‚Çô, f‚Çô = _result_from_storage(storage, x‚Çô, f‚Çô, f, mode, iip)
            return DiffEqBase.build_solution(prob,
                alg,
                reconstruct(x‚Çô),
                reconstruct(f‚Çô);
                retcode)
        end

        _L = min(i, Œ∑)
        _U = U[1:_L, :, :]
        _V·µÄ = V·µÄ[:, 1:_L, :]

        idx = mod1(i, Œ∑)

        if i > 1
            partial_Œ∑Nx = Œ∑Nx[1:_L, :]

            _Œ∑Nx = reshape(partial_Œ∑Nx, 1, :, N)
            batched_mul!(_Œ∑Nx, reshape(Œ¥x‚Çô, 1, L, N), _V·µÄ)
            batched_mul!(V·µÄ[:, idx:idx, :], _Œ∑Nx, _U)
            V·µÄ[:, idx, :] .-= Œ¥x‚Çô

            _Œ∑Nx = reshape(partial_Œ∑Nx, :, 1, N)
            batched_mul!(_Œ∑Nx, _U, reshape(Œ¥f‚Çô, L, 1, N))
            batched_mul!(U[idx:idx, :, :], _V·µÄ, _Œ∑Nx)
            U[idx, :, :] .-= Œ¥f‚Çô
        else
            V·µÄ[:, idx, :] .= -Œ¥x‚Çô
            U[idx, :, :] .= -Œ¥f‚Çô
        end

        U[idx, :, :] .= (Œ¥x‚Çô .- U[idx, :, :]) ./
                        (sum(V·µÄ[:, idx, :] .* Œ¥f‚Çô; dims = 1) .+
                         convert(T, 1e-5))

        _L = min(i + 1, Œ∑)
        _Œ∑Nx = reshape(Œ∑Nx[1:_L, :], :, 1, N)
        batched_mul!(_Œ∑Nx, U[1:_L, :, :], reshape(Œ¥f‚Çô, L, 1, N))
        batched_mul!(reshape(Œ¥x‚Çô, L, 1, N), V·µÄ[:, 1:_L, :], _Œ∑Nx)

        x‚Çô‚Çã‚ÇÅ .= x‚Çô
        f‚Çô‚Çã‚ÇÅ .= f‚Çô
    end

    if mode ‚àà DiffEqBase.SAFE_BEST_TERMINATION_MODES
        x‚Çô = storage.u
        @maybeinplace iip f‚Çô=f(x‚Çô)
    end

    return DiffEqBase.build_solution(prob,
        alg,
        reconstruct(x‚Çô),
        reconstruct(f‚Çô);
        retcode = ReturnCode.MaxIters)
end

end
